{
  "version": 3,
  "sources": ["../src/utils/utils.ts", "../src/background_workers/background.chrome.ts"],
  "sourcesContent": ["import { Settings } from './types';\n\nexport const capitalize = (s: string): string => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const removeProtocol = (url: string): string => {\n  return url.replace('http://', '').replace('https://', '');\n};\n\nexport const settingsToJSONString = (settings: Settings): string => {\n  return JSON.stringify(settings, null, 2); // pretty-print with 2-space indent\n};\n", "/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n\n/// <reference types=\"chrome\"/>\nimport {\n    GithubResponses,\n    MessageData,\n    GithubDeviceCodeResponse,\n    GithubTokenResponse,\n    GithubAPIResponse,\n    Settings,\n    GistResponse,\n} from '../utils/types';\nimport { settingsToJSONString } from '../utils/utils';\n\n\nconst CLIENT_ID = 'Iv23li5frjjDBAV3DfuR';\n\nconst DeviceBaseFlowURL = 'https://github.com/login/';\nconst GistBaseURL = 'https://api.github.com/gists';\n\n\nexport const getToken = async (): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        chrome.storage.local.get('github_token', (stored) => {\n            if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n                return;\n            }\n            resolve((stored?.github_token as string) ?? '');\n        });\n    });\n};\n\nchrome.runtime.onMessage.addListener(\n    (\n        message: MessageData,\n        _sender: chrome.runtime.MessageSender,\n        sendResponse: (response: GithubResponses) => void,\n    ): boolean | void => {\n        if (message.type === 'GITHUB_DEVICE_FLOW') {\n            void (async () => {\n                try {\n                    if (message.action === 'startDeviceFlow') {\n                        // Step 1: Get device/user code\n                        const resp = await fetch(`${DeviceBaseFlowURL}device/code`, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/x-www-form-urlencoded',\n                                Accept: 'application/json',\n                            },\n                            body: `client_id=${encodeURIComponent(CLIENT_ID)}&scope=gist`,\n                        });\n\n                        if (!resp.ok) {\n                            throw new Error(`HTTP error! status: ${resp.status}`);\n                        }\n\n                        const data: GithubDeviceCodeResponse = await resp.json();\n                        sendResponse({ success: true, data });\n                    } else if (message.action === 'getToken') {\n                        // Step 2: Poll for access token\n                        const resp = await fetch(`${DeviceBaseFlowURL}/oauth/access_token`, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/x-www-form-urlencoded',\n                                Accept: 'application/json',\n                            },\n                            body: `client_id=${encodeURIComponent(CLIENT_ID)}&device_code=${encodeURIComponent(\n                                message.device_code,\n                            )}&grant_type=urn:ietf:params:oauth:grant-type:device_code`,\n                        });\n\n                        if (!resp.ok) {\n                            throw new Error(`HTTP error! status: ${resp.status}`);\n                        }\n\n                        const data: GithubTokenResponse = await resp.json();\n                        sendResponse({ success: true, data });\n                    }\n                } catch (error) {\n                    sendResponse({\n                        success: false,\n                        error: error instanceof Error ? error.message : String(error),\n                    });\n                }\n            })();\n\n            // Required for async sendResponse\n            return true;\n        }\n        if (message.type === 'GITHUB_GIST_API') {\n            (async () => {\n                const token = await getToken();\n                const { action, gistId, payload } = message;\n                const apiUrl = gistId ? `${GistBaseURL}/${gistId}` : GistBaseURL;\n                const headers = {\n                    Authorization: `Bearer ${token}`,\n                    Accept: 'application/vnd.github+json',\n                    'Content-Type': 'application/json',\n                };\n\n                if (action === 'findGist') {\n                    const resp = await fetch(apiUrl, {\n                        headers: headers,\n                    });\n                    if (!resp.ok) throw new Error('Failed to fetch gist');\n                    const response: GistResponse = await resp.json();\n                    const content = response.files['settings.json'].content as string;\n                    const settings = JSON.parse(content) as Settings;\n                    settings.githubSync.gistId = response.id;\n                    const data: GithubAPIResponse = {\n                        gistId: response.id,\n                        url: response.url,\n                        public: response.public,\n                        settings: settings,\n                    };\n                    sendResponse({ success: true, data: data || null });\n                } else if (action === 'createOrUpdateLooiGist') {\n                    const body = {\n                        description: 'Settings for looi extension',\n                        public: payload.githubSync.publicGist,\n                        files: {\n                            'settings.json': {\n                                content: settingsToJSONString(payload),\n                            },\n                        },\n                    };\n                    const resp = await fetch(apiUrl, {\n                        method: gistId ? 'PATCH' : 'POST',\n                        headers: headers,\n                        body: JSON.stringify(body),\n                    });\n\n                    if (!resp.ok) {\n                        throw new Error(`GitHub API error: ${resp.status} ${resp.statusText}`);\n                    }\n\n                    const response: GistResponse = await resp.json();\n                    const content = response.files['settings.json'].content as string;\n                    const settings = JSON.parse(content) as Settings;\n                    settings.githubSync.gistId = response.id;\n                    const data: GithubAPIResponse = {\n                        gistId: response.id,\n                        url: response.url,\n                        public: response.public,\n                        settings: settings,\n                    };\n                    sendResponse({ success: resp.ok, data });\n                }\n            })().catch((err) => {\n                sendResponse({\n                    success: false,\n                    error: err instanceof Error ? err.message : String(err),\n                });\n            });\n            return true;\n        }\n        return undefined;\n    },\n);\n"],
  "mappings": "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",
  "names": []
}
