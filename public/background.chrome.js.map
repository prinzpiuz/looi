{
  "version": 3,
  "sources": ["../src/utils/utils.ts", "../src/background_workers/background.chrome.ts"],
  "sourcesContent": ["import { Settings } from './types';\n\nexport const capitalize = (s: string): string => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const removeProtocol = (url: string): string => {\n  return url.replace('http://', '').replace('https://', '');\n};\n\nexport const settingsToJSONString = (settings: Settings): string => {\n  return JSON.stringify(settings, null, 2); // pretty-print with 2-space indent\n};\n", "/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n\n/// <reference types=\"chrome\"/>\nimport {\n  GithubResponses,\n  MessageData,\n  GithubDeviceCodeResponse,\n  GithubTokenResponse,\n  GithubAPIResponse,\n  Settings,\n  GistResponse,\n} from '../utils/types';\nimport { settingsToJSONString } from '../utils/utils';\n\nconst CLIENT_ID = 'Iv23li5frjjDBAV3DfuR';\n\nconst DeviceBaseFlowURL = 'https://github.com/login/';\nconst GistBaseURL = 'https://api.github.com/gists';\n\nexport const getToken = async (): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get('github_token', (stored) => {\n      if (chrome.runtime.lastError) {\n        reject(chrome.runtime.lastError);\n        return;\n      }\n      resolve((stored?.github_token as string) ?? '');\n    });\n  });\n};\n\nchrome.runtime.onMessage.addListener(\n  (\n    message: MessageData,\n    _sender: chrome.runtime.MessageSender,\n    sendResponse: (response: GithubResponses) => void,\n  ): boolean | void => {\n    if (message.type === 'GITHUB_DEVICE_FLOW') {\n      void (async () => {\n        try {\n          if (message.action === 'startDeviceFlow') {\n            // Step 1: Get device/user code\n            const resp = await fetch(`${DeviceBaseFlowURL}device/code`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Accept: 'application/json',\n              },\n              body: `client_id=${encodeURIComponent(CLIENT_ID)}&scope=gist`,\n            });\n\n            if (!resp.ok) {\n              throw new Error(`HTTP error! status: ${resp.status}`);\n            }\n\n            const data: GithubDeviceCodeResponse = await resp.json();\n            sendResponse({ success: true, data });\n          } else if (message.action === 'getToken') {\n            // Step 2: Poll for access token\n            const resp = await fetch(`${DeviceBaseFlowURL}/oauth/access_token`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Accept: 'application/json',\n              },\n              body: `client_id=${encodeURIComponent(CLIENT_ID)}&device_code=${encodeURIComponent(\n                message.device_code,\n              )}&grant_type=urn:ietf:params:oauth:grant-type:device_code`,\n            });\n\n            if (!resp.ok) {\n              throw new Error(`HTTP error! status: ${resp.status}`);\n            }\n\n            const data: GithubTokenResponse = await resp.json();\n            sendResponse({ success: true, data });\n          }\n        } catch (error) {\n          sendResponse({\n            success: false,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n      })();\n\n      // Required for async sendResponse\n      return true;\n    }\n    if (message.type === 'GITHUB_GIST_API') {\n      (async () => {\n        const token = await getToken();\n        const { action, gistId, payload } = message;\n        const apiUrl = gistId ? `${GistBaseURL}/${gistId}` : GistBaseURL;\n        const headers = {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/vnd.github+json',\n          'Content-Type': 'application/json',\n        };\n\n        if (action === 'findGist') {\n          const resp = await fetch(apiUrl, {\n            headers: headers,\n          });\n          if (!resp.ok) throw new Error('Failed to fetch gist');\n          const response: GistResponse = await resp.json();\n          const content = response.files['settings.json'].content as string;\n          const settings = JSON.parse(content) as Settings;\n          settings.githubSync.gistId = response.id;\n          const data: GithubAPIResponse = {\n            gistId: response.id,\n            url: response.url,\n            public: response.public,\n            settings: settings,\n          };\n          sendResponse({ success: true, data: data || null });\n        } else if (action === 'createOrUpdateLooiGist') {\n          const body = {\n            description: 'Settings for looi extension',\n            public: payload?.githubSync.publicGist,\n            files: {\n              'settings.json': {\n                    content: payload ? settingsToJSONString(payload) : '',\n              },\n            },\n          };\n          const resp = await fetch(apiUrl, {\n            method: gistId ? 'PATCH' : 'POST',\n            headers: headers,\n            body: JSON.stringify(body),\n          });\n\n          if (!resp.ok) {\n            throw new Error(`GitHub API error: ${resp.status} ${resp.statusText}`);\n          }\n\n          const response: GistResponse = await resp.json();\n          const content = response.files['settings.json'].content as string;\n          const settings = JSON.parse(content) as Settings;\n          settings.githubSync.gistId = response.id;\n          const data: GithubAPIResponse = {\n            gistId: response.id,\n            url: response.url,\n            public: response.public,\n            settings: settings,\n          };\n          sendResponse({ success: resp.ok, data });\n        }\n      })().catch((err) => {\n        sendResponse({\n          success: false,\n          error: err instanceof Error ? err.message : String(err),\n        });\n      });\n      return true;\n    }\n    return undefined;\n  },\n);\n"],
  "mappings": "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",
  "names": []
}
